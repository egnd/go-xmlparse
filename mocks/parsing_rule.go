// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package mocks

import (
	xmlparse "github.com/egnd/go-xmlparse"
	mock "github.com/stretchr/testify/mock"
)

// ParsingRule is an autogenerated mock type for the ParsingRule type
type ParsingRule struct {
	mock.Mock
}

// Execute provides a mock function with given fields: next
func (_m *ParsingRule) Execute(next xmlparse.TokenHandler) xmlparse.TokenHandler {
	ret := _m.Called(next)

	var r0 xmlparse.TokenHandler
	if rf, ok := ret.Get(0).(func(xmlparse.TokenHandler) xmlparse.TokenHandler); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(xmlparse.TokenHandler)
		}
	}

	return r0
}

type NewParsingRuleT interface {
	mock.TestingT
	Cleanup(func())
}

// NewParsingRule creates a new instance of ParsingRule. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewParsingRule(t NewParsingRuleT) *ParsingRule {
	mock := &ParsingRule{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
